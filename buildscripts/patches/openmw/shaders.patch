From bbd346e0111367653cb952fec867a9dc38bbcf88 Mon Sep 17 00:00:00 2001
From: sisah <jirielbunda@seznam.cz>
Date: Thu, 15 Feb 2024 02:14:12 -0500
Subject: [PATCH] shaders

diff --git a/files/shaders/compatibility/objects.frag b/files/shaders/compatibility/objects.frag
index 56c7abf27c7..8966a84bf05 100644
--- a/files/shaders/compatibility/objects.frag
+++ b/files/shaders/compatibility/objects.frag
@@ -109,11 +109,11 @@ uniform float softFalloffDepth;

 #if @particleOcclusion
 #include "lib/particle/occlusion.glsl"
-uniform sampler2D orthoDepthMap;
+uniform highp sampler2D orthoDepthMap;
 varying vec3 orthoDepthMapCoord;
 #endif

-uniform sampler2D opaqueDepthTex;
+uniform highp sampler2D opaqueDepthTex;

 void main()
 {

diff --git a/files/shaders/compatibility/debug.frag b/files/shaders/compatibility/debug.frag
index a92b406d46b..041562fc0e2 100644
--- a/files/shaders/compatibility/debug.frag
+++ b/files/shaders/compatibility/debug.frag
@@ -4,7 +4,7 @@
 
 varying vec3 vertexNormal;
 
-uniform bool useAdvancedShader = false;
+uniform bool useAdvancedShader;
 
 void main()
 {
diff --git a/files/shaders/compatibility/debug.vert b/files/shaders/compatibility/debug.vert
index 47d5337a66f..a1fa462f397 100644
--- a/files/shaders/compatibility/debug.vert
+++ b/files/shaders/compatibility/debug.vert
@@ -6,7 +6,7 @@ uniform vec3 color;
 uniform vec3 trans;
 uniform vec3 scale;
 uniform bool useNormalAsColor;
-uniform bool useAdvancedShader = false;
+uniform bool useAdvancedShader;
 
 centroid varying vec4 passColor;
 varying vec3 vertexNormal;

diff --git a/files/shaders/lib/core/fragment.h.glsl b/files/shaders/lib/core/fragment.h.glsl
index 1bc2a1f79ab..de41dbc7ab1 100644
--- a/files/shaders/lib/core/fragment.h.glsl
+++ b/files/shaders/lib/core/fragment.h.glsl
@@ -1,20 +1,43 @@
 #ifndef OPENMW_FRAGMENT_H_GLSL
 #define OPENMW_FRAGMENT_H_GLSL

-@link "lib/core/fragment.glsl" if !@useOVR_multiview
-@link "lib/core/fragment_multiview.glsl" if @useOVR_multiview
+uniform sampler2D reflectionMap;

-vec4 sampleReflectionMap(vec2 uv);
+vec4 sampleReflectionMap(vec2 uv)
+{
+    return texture2D(reflectionMap, uv);
+}

 #if @waterRefraction
-vec4 sampleRefractionMap(vec2 uv);
-float sampleRefractionDepthMap(vec2 uv);
+uniform sampler2D refractionMap;
+uniform highp sampler2D refractionDepthMap;
+
+vec4 sampleRefractionMap(vec2 uv)
+{
+    return texture2D(refractionMap, uv);
+}
+
+float sampleRefractionDepthMap(vec2 uv)
+{
+    return texture2D(refractionDepthMap, uv).x;
+}
+
 #endif

-vec4 samplerLastShader(vec2 uv);
+uniform sampler2D lastShader;
+
+vec4 samplerLastShader(vec2 uv)
+{
+    return texture2D(lastShader, uv);
+}

 #if @skyBlending
-vec3 sampleSkyColor(vec2 uv);
+uniform sampler2D sky;
+
+vec3 sampleSkyColor(vec2 uv)
+{
+    return texture2D(sky, uv).xyz;
+}
 #endif

 #endif  // OPENMW_FRAGMENT_H_GLSL
diff --git a/files/shaders/lib/core/vertex.h.glsl b/files/shaders/lib/core/vertex.h.glsl
index 6e22f6deb15..c8a1080574d 100644
--- a/files/shaders/lib/core/vertex.h.glsl
+++ b/files/shaders/lib/core/vertex.h.glsl
@@ -1,6 +1,16 @@
-@link "lib/core/vertex.glsl" if !@useOVR_multiview
-@link "lib/core/vertex_multiview.glsl" if @useOVR_multiview
+uniform mat4 projectionMatrix;

-vec4 modelToClip(vec4 pos);
-vec4 modelToView(vec4 pos);
-vec4 viewToClip(vec4 pos);
+vec4 modelToView(vec4 pos)
+{
+    return gl_ModelViewMatrix * pos;
+}
+
+vec4 modelToClip(vec4 pos)
+{
+    return projectionMatrix * modelToView(pos);
+}
+
+vec4 viewToClip(vec4 pos)
+{
+    return projectionMatrix * pos;
+}

diff --git a/files/shaders/compatibility/fullscreen_tri.vert b/files/shaders/compatibility/fullscreen_tri.vert
index 3174384212e..8510a0933c1 100644
--- a/files/shaders/compatibility/fullscreen_tri.vert
+++ b/files/shaders/compatibility/fullscreen_tri.vert
@@ -1,6 +1,6 @@
 #version 120

-uniform vec2 scaling = vec2(1.0, 1.0);
+uniform vec2 scaling;// = vec2(1.0, 1.0);

 varying vec2 uv;

diff --git a/files/shaders/compatibility/fog.glsl b/files/shaders/compatibility/fog.glsl
index a7cccbf7876..a856e9f929d 100644
--- a/files/shaders/compatibility/fog.glsl
+++ b/files/shaders/compatibility/fog.glsl
@@ -16,8 +16,8 @@ vec4 applyFogAtDist(vec4 color, float euclideanDist, float linearDist, float far
 #else
     float fogValue = clamp((dist - gl_Fog.start) * gl_Fog.scale, 0.0, 1.0);
 #endif
-#ifdef ADDITIVE_BLENDING
-    color.xyz *= 1.0 - fogValue;
+#if defined(ADDITIVE_BLENDING)
+    color.xyz = mix(color.xyz, gl_Fog.color.xyz, fogValue);
 #else
     color.xyz = mix(color.xyz, gl_Fog.color.xyz, fogValue);
 #endif
@@ -25,8 +25,8 @@ vec4 applyFogAtDist(vec4 color, float euclideanDist, float linearDist, float far
 #if @skyBlending
     float fadeValue = clamp((far - dist) / (far - skyBlendingStart), 0.0, 1.0);
     fadeValue *= fadeValue;
-#ifdef ADDITIVE_BLENDING
-    color.xyz *= fadeValue;
+#if defined(ADDITIVE_BLENDING)
+    color.xyz = mix(sampleSkyColor(gl_FragCoord.xy / screenRes), color.xyz, fadeValue);
 #else
     color.xyz = mix(sampleSkyColor(gl_FragCoord.xy / screenRes), color.xyz, fadeValue);
 #endif
 diff --git a/files/shaders/compatibility/water.frag b/files/shaders/compatibility/water.frag
index d1324e01bd..e26a7744d4 100644
--- a/files/shaders/compatibility/water.frag
+++ b/files/shaders/compatibility/water.frag
@@ -140,7 +140,7 @@ void main(void)
     float sunFade = length(gl_LightModel.ambient.xyz);
 
     // fresnel
-    float ior = (cameraPos.z>0.0)?(1.333/1.0):(1.0/1.333); // air to water; water to air
+    float ior = 1.333; // air to water; water to air
     float fresnel = clamp(fresnel_dielectric(viewDir, normal, ior), 0.0, 1.0);
 
     vec2 screenCoordsOffset = normal.xy * REFL_BUMP;