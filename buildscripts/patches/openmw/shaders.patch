From 57b05a99323241c9ae91a3ea4cda32c94370805c Mon Sep 17 00:00:00 2001
From: Duron27 <duron27@gmail.com>
Date: Sat, 20 Jul 2024 18:11:40 -0400
Subject: [PATCH] fragment test

diff --git a/files/shaders/lib/core/fragment.h.glsl b/files/shaders/lib/core/fragment.h.glsl
index 1bc2a1f79ab..b70751e47d4 100644
--- a/files/shaders/lib/core/fragment.h.glsl
+++ b/files/shaders/lib/core/fragment.h.glsl
@@ -1,20 +1,43 @@
 #ifndef OPENMW_FRAGMENT_H_GLSL
 #define OPENMW_FRAGMENT_H_GLSL
 
-@link "lib/core/fragment.glsl" if !@useOVR_multiview
-@link "lib/core/fragment_multiview.glsl" if @useOVR_multiview
+uniform sampler2D reflectionMap;
 
-vec4 sampleReflectionMap(vec2 uv);
+vec4 sampleReflectionMap(vec2 uv)
+{
+    return texture2D(reflectionMap, uv);
+}
 
 #if @refraction_enabled
-vec4 sampleRefractionMap(vec2 uv);
-float sampleRefractionDepthMap(vec2 uv);
+uniform sampler2D refractionMap;
+uniform sampler2D refractionDepthMap;
+
+vec4 sampleRefractionMap(vec2 uv)
+{
+    return texture2D(refractionMap, uv);
+}
+
+float sampleRefractionDepthMap(vec2 uv)
+{
+    return texture2D(refractionDepthMap, uv).x;
+}
+
 #endif
 
-vec4 samplerLastShader(vec2 uv);
+uniform sampler2D lastShader;
+
+vec4 samplerLastShader(vec2 uv)
+{
+    return texture2D(lastShader, uv);
+}
 
 #if @skyBlending
-vec3 sampleSkyColor(vec2 uv);
+uniform sampler2D sky;
+
+vec3 sampleSkyColor(vec2 uv)
+{
+    return texture2D(sky, uv).xyz;
+}
 #endif
 
 #endif  // OPENMW_FRAGMENT_H_GLSL

 diff --git a/files/shaders/lib/core/vertex.h.glsl b/files/shaders/lib/core/vertex.h.glsl
index 6e22f6deb15..eba5f139c09 100644
--- a/files/shaders/lib/core/vertex.h.glsl
+++ b/files/shaders/lib/core/vertex.h.glsl
@@ -1,6 +1,16 @@
-@link "lib/core/vertex.glsl" if !@useOVR_multiview
-@link "lib/core/vertex_multiview.glsl" if @useOVR_multiview
+uniform mat4 projectionMatrix;
 
-vec4 modelToClip(vec4 pos);
-vec4 modelToView(vec4 pos);
-vec4 viewToClip(vec4 pos);
+vec4 modelToClip(vec4 pos)
+{
+    return projectionMatrix * modelToView(pos);
+}
+
+vec4 modelToView(vec4 pos)
+{
+    return gl_ModelViewMatrix * pos;
+}
+
+vec4 viewToClip(vec4 pos)
+{
+    return projectionMatrix * pos;
+}
